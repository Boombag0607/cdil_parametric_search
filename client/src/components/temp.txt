{
    /* <div className="col d-flex align-items-start bg-light mb-3">
                <details>
                  <summary>{element.name}</summary>
                  <ul>
                    {element.types.map((type) => (
                      <a href="">
                        <li>{type}</li>
                      </a>
                    ))}
                  </ul>
                </details>
              </div>*/
  }


//DeviceTable.js => useEffect
// This code will run when the component is rendered
    // const getColumns = async (subCat) => {
    //   try {
    //     const response = await fetch(`http://localhost:3000/parameters/${subCat}`);
    //     const data = await response.json(); // Parse the JSON response
    //     const cols = data.map(col => {
    //       return {
    //         id: col.toLowerCase(),
    //         numeric: false,
    //         disablePadding: true,
    //         label: col
    //       }
    //     })
    //     setColumns([{id: "device", numeric:false, label: "Device"}, ...cols]);
    //   } catch (err) {
    //     console.error(err.message);
    //   }
    // };

    // const getData = async (device) => {
    //   try {
    //     const response = await fetch(`http://localhost:3000/data/${encodeURIComponent(device)}`);
    //     const data = await response.json();
    //     setDeviceData(data);
    //   } catch (err) {
    //     console.error(err.message);
    //   }
    // }

    // const getDevicesAndMakeData = async (subCat) => {
    //   try {
    //     const response = await fetch(`http://localhost:3000/devices/${subCat}`);
    //     const data = await response.json(); // Parse the JSON response
    //     // const devices = data.filter(device => device.sub_cat.includes(subCat));
    //     const rows = data.map(device => {
    //       getData(device);
    //       return createData(...[device, ...deviceData])
    //     })
    //     setRows(rows);
    //   } catch (err) {
    //     console.error(err.message);
    //   }
    // }

    // // Call the function with the desired subCat value
    // getColumns(subCat);
    // getDevicesAndMakeData(subCat);

// DeviceTable rows -
// const rows = [
//   createData("Cupcake", 305, 3.7, 67, 4.3),
//   createData("Donut", 452, 25.0, 51, 4.9),
//   createData("Eclair", 262, 16.0, 24, 6.0),
//   createData("Frozen yoghurt", 159, 6.0, 24, 4.0),
//   createData("Gingerbread", 356, 16.0, 49, 3.9),
//   createData("Honeycomb", 408, 3.2, 87, 6.5),
//   createData("Ice cream sandwich", 237, 9.0, 37, 4.3),
//   createData("Jelly Bean", 375, 0.0, 94, 0.0),
//   createData("KitKat", 518, 26.0, 65, 7.0),
//   createData("Lollipop", 392, 0.2, 98, 0.0),
//   createData("Marshmallow", 318, 0, 81, 2.0),
//   createData("Nougat", 360, 19.0, 9, 37.0),
//   createData("Oreo", 437, 18.0, 63, 4.0),
// ];

// const columns = [
//   {
//     id: "name",
//     numeric: false,
//     disablePadding: true,
//     label: "Dessert (100g serving)",
//   },
//   {
//     id: "calories",
//     numeric: true,
//     disablePadding: false,
//     label: "Calories",
//   },
//   {
//     id: "fat",
//     numeric: true,
//     disablePadding: false,
//     label: "Fat (g)",
//   },
//   {
//     id: "carbs",
//     numeric: true,
//     disablePadding: false,
//     label: "Carbs (g)",
//   },
//   {
//     id: "protein",
//     numeric: true,
//     disablePadding: false,
//     label: "Protein (g)",
//   },
// ];

DeviceTable Checkbox
 {/* <TableCell padding="checkbox">
          <Checkbox
            color="primary"
            indeterminate={numSelected > 0 && numSelected < rowCount}
            checked={rowCount > 0 && numSelected === rowCount}
            onChange={onSelectAllClick}
            inputProps={{
              "aria-label": "select all desserts",
            }}
          />
        </TableCell> */}

  {/* <TableCell padding="checkbox">
                  <Checkbox
                    color="primary"
                    checked={isItemSelected}
                    inputProps={{
                      "aria-labelledby": labelId,
                    }}
                  />
                </TableCell> */}
                  {/* <TableCell
                  component="th"
                  id={labelId}
                  scope="row"
                  padding="none"
                  align="center"
                >
                  {row.name}
                </TableCell>
                <TableCell align="center">{row.calories}</TableCell>
                <TableCell align="center">{row.fat}</TableCell>
                <TableCell align="center">{row.carbs}</TableCell>
                <TableCell align="center">{row.protein}</TableCell> */}